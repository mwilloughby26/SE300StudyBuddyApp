import java.util.List;
import java.util.ArrayList;

import javafx.animation.Animation;
import javafx.animation.AnimationTimer;
import javafx.animation.FadeTransition;
import javafx.application.Application;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.util.Duration;

public class reward_racer extends Application{
	private Pane root;
	Stage window;
	Scene scene1;
	private AnimationTimer timer;
	private Node playerCar;
	private List <Node> obsticals = new ArrayList<>();
	
	private Parent createContent() {
		root = new Pane();
		root.setPrefSize(900, 500);
		playerCar = createPlayer();
		root.getChildren().add(playerCar);
		timer = new AnimationTimer() {
		@Override
		public void handle(long now) {
			UpdateOpponents();
		}
		};
		timer.start();
		return root;
	}
	
	private Node createPlayer() {
		Rectangle Player = new Rectangle(50, 50, Color.RED);
		Player.setTranslateX(450);
		Player.setTranslateY(250);
		return Player;
	}
	private Node creatcars() {
		Rectangle rectCars = new Rectangle(50, 50, Color.PURPLE);
		rectCars.setTranslateY((int)(Math.random()*14)*40);
		root.getChildren().add(rectCars);
		return rectCars;
	}
	
	private void UpdateOpponents() {
		for(Node Allobsticals: obsticals) {
			Allobsticals.setTranslateX(Allobsticals.getTranslateX() + Math.random() * 9);
			if(Math.random() < 0.075) {
				obsticals.add(creatcars());
			}
			checkPoss();
			
		}
	}
	
	private void checkPoss() {
		for(Node cars: obsticals) {
			if(cars.getBoundsInParent().intersects(playerCar.getBoundsInParent())) {
				timer.stop();
				String win = "You crashed!";
				HBox hbox = new HBox();
				hbox.setTranslateX(400);
				hbox.setTranslateY(300);
				root.getChildren().add(hbox);
				
				for(int i = 0; i < win.toCharArray().length; i++) {
					char letters = win.charAt(i);
					Text speech = new Text(String.valueOf(letters));
					speech.setFont(Font.font(40));
					speech.setOpacity(0);
					
					hbox.getChildren().add(speech);
					
					FadeTransition tran = new FadeTransition(Duration.seconds(1), speech);
					tran.setToValue(1);
					tran.setDelay(Duration.seconds(1));
					tran.play();
	}
			}
		}
	}
	
	@Override
	public void start(Stage main_stage) throws Exception{
		main_stage.setScene(new Scene(createContent()));
		main_stage.getScene().setOnKeyPressed(event ->{
			switch(event.getCode()) {
			case W:
				playerCar.setTranslateY(playerCar.getTranslateY()-50);
			break;
			case S:
				playerCar.setTranslateY(playerCar.getTranslateY()+50);
				break;
				default:
					break;
			}
			});
		main_stage.show();
	}

	public static void main(String[] args) {
		launch(args);
	}
}
