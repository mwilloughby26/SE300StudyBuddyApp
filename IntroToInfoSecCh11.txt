buffer overflow	
A condition at an interface under which more input can be placed into a buffer or data holding area than the capacity allocated overwriting other information. Attackers exploit such a condition to crash a system or to insert specially crafted code that allows them to gain control of the system.
stack, heap or data section of a process
three distinct types of locations in a processes address space that buffer overflow attacks typically target
the possible consequences of a buffer overflow occurring	
corruption of data used in the program unexpected transfer of control in the program memory access violations eventual program termination
the two key elements that must be identified in order to implement a buffer overflow	
Identification of a vulnerability that can be triggered using externally sourced data under the attackers control and Understanding of how that buffer will be stored in the process memory
types of programming languages are vulnerable to buffer overflows	
Assembly languages and C
how a stack buffer overflow is implemented	
A stack buffer overflow occurs when the targeted buffer is located on the stack usually as a local variable in a function's stack frame.
shellcode	
The act of transferring the execution to code supplied by the attacker that is often saved in the buffer being overflowed
restrictions often found in a shellcode	
Shellcode has to be position independent and cannot contain any NULL values
NOP sled	
a mechanism to determine the starting address of the code the attacker wants to execute
operations an attacker may design shellcode to perform	
Set up a listening service to launch a remote shell when connected to create a reverse shell that connects back to the hacker use local exploits that establish a shell flush firewall rules that currently prevent other attacks
Run-time defenses	
aim to detect and abort attacks in existing programs
Compile-time defenses	
aim to harden programs to resist attacks in new programs