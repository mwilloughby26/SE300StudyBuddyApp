import java.util.List;
import java.util.ArrayList;

import javafx.animation.Animation;
import javafx.animation.AnimationTimer;
import javafx.animation.FadeTransition;
import javafx.application.Application;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.util.Duration;

public class reward_frogger extends Application{
	private Pane root;
	private AnimationTimer timer;
	private List<Node> objectCars = new ArrayList<>();
	private Node frogger;
	
	private Parent creatGame() {
		root = new Pane();
		root.setPrefSize(800,600);
		frogger = creatFrogger();
		root.getChildren().add(frogger);
		timer = new AnimationTimer() {
		@Override
		public void handle(long start) {
			update();
		}
	};
	timer.start();
		return root;
	}
	private Node creatFrogger() {
		Circle circFrog = new Circle(40,40,40, Color.GREEN);
		circFrog.setTranslateY(600-40);
		return circFrog;
		
	}
	
	private Node createCars() {
		Rectangle rectCars = new Rectangle(40, 40, Color.BLACK);
		rectCars.setTranslateY((int)(Math.random()*14)*40);
		root.getChildren().add(rectCars);
		return rectCars;
	}
	private void update() {
		for(Node Allcars : objectCars)
			Allcars.setTranslateX(Allcars.getTranslateX()+Math.random()*10);
		if(Math.random() < 0.075) {
			objectCars.add(createCars());
		}
		checkPos();
	}
	public void checkPos() {
		for (Node Allcars: objectCars) {
			if(Allcars.getBoundsInParent().intersects(frogger.getBoundsInParent())) {
				frogger.setTranslateX(0);
				frogger.setTranslateY(600-40);
				return;
			}
		}
			if(frogger.getTranslateY() <= 0) {
				String finished = "You crossed";
				timer.stop();
				HBox box = new HBox();
				box.setTranslateX(350);
				box.setTranslateX(350);
				root.getChildren().add(box);
				
				for(int i = 0; i < finished.toCharArray().length; i++) {
					char letter = finished.charAt(i);
					Text over = new Text(String.valueOf(letter));
					over.setFont(Font.font(60));
					over.setOpacity(0);
					
					box.getChildren().add(over);
					
					FadeTransition trans = new FadeTransition(Duration.seconds(1), over);
					trans.setToValue(1);
					trans.setDelay(Duration.seconds(i * 0.25));
					trans.play();
				}
			}
		}
	
	@Override
	public void start(Stage stage) throws Exception {
		// TODO Auto-generated method stub
		stage.setScene(new Scene(creatGame()));
		stage.getScene().setOnKeyPressed(event -> {
			switch (event.getCode()) {
			case W:
				frogger.setTranslateY(frogger.getTranslateY()-40);
			break;
			case S:
				frogger.setTranslateY(frogger.getTranslateY()+40);
			break;
			case A:
				frogger.setTranslateX(frogger.getTranslateX()-40);
			break;
			case D:
				frogger.setTranslateX(frogger.getTranslateX()+40);
			break;
			default:
			break;
			}
		});
		stage.show();
	}
	
	public static void main(String[] args) {
		launch(args);
	}
}
